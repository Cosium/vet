package com.cosium.vet;

import com.cosium.vet.gerrit.DefaultGerritClientFactory;
import com.cosium.vet.gerrit.GerritClientProvider;
import com.cosium.vet.git.DefaultGitRepositoryProvider;
import com.cosium.vet.git.GitRepositoryProvider;
import com.cosium.vet.push.PushCommandArgParser;
import com.cosium.vet.runtime.DefaultProcessBuilderFactory;
import com.cosium.vet.runtime.ProcessBuilderFactory;
import com.google.common.collect.Lists;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

  public static final String NAME = "vet";

  private static final ProcessBuilderFactory PROCESS_BUILDER_FACTORY =
      new DefaultProcessBuilderFactory();
  private static final GitRepositoryProvider GIT_REPOSITORY_PROVIDER =
      new DefaultGitRepositoryProvider(PROCESS_BUILDER_FACTORY);
  private static final GerritClientProvider GERRIT_CLIENT_FACTORY =
      new DefaultGerritClientFactory(GIT_REPOSITORY_PROVIDER);

  private static final PushCommandArgParser PUSH_COMMAND_ARG_PARSER =
      new PushCommandArgParser(GERRIT_CLIENT_FACTORY, GIT_REPOSITORY_PROVIDER);

  private static final List<VetCommandArgParser> parsers =
      Lists.newArrayList(PUSH_COMMAND_ARG_PARSER);

  public static void main(String[] args) {
    parsers
        .stream()
        .map(parser -> parser.parse(Arrays.copyOf(args, args.length)))
        .filter(Optional::isPresent)
        .map(Optional::get)
        .findFirst()
        .orElseGet(HelpCommand::new)
        .execute();
  }
}
